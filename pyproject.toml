[tool.poetry]
name = "otter-welcome-buddy"
version = "0.1.0"
description = ""
authors = ["proyecto-nutria <contact@proyectonutria.com>"]

[tool.poetry.dependencies]
python = "^3.10"
"discord.py" = "^2.0.1"
APScheduler = "^3.9.1"
python-dotenv = "^0.21.0"
SQLAlchemy = "^2.0.8"
alembic = "^1.10.3"
Pillow = "^9.4.0"
requests = "^2.28.2"
jsonschema = "^4.17.3"

[tool.poetry.dev-dependencies]
pytest = "^7.2.0"
black = "^22.8.0"
flake8 = "^4.0.1"
pre-commit = "^2.20.0"
pytest-asyncio = "^0.19.0"
pytest-mock = "^3.10.0"

[tool.pylint."MESSAGES CONTROL"]
disable = ["E0401", "E0611", "C0114", "R0903", "W0718", "W0511"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
target-version = ["py310"]
line-length = 120

[tool.pylint.format]
max-line-length = 120

[tool.mypy]
python_version = "3.10"
# use visually nicer output in error messages
pretty = true
# report whenever it encounters a function definition without type annotations
disallow_untyped_defs = true
# report whenever it encounters a partly annotated function definition
disallow_incomplete_defs = true
# report whenever a function with type annotations is decorated with a decorator without annotations
disallow_untyped_decorators = true
# equivalent to adding # type: ignore comments to all unresolved imports within your codebase
ignore_missing_imports = true
# partial types are variables initialized using None, but without explicit Optional annotations
local_partial_types = true
# uses an unnecessary cast that can safely be removed
warn_redundant_casts = true
# uses a # type: ignore comment on a line that is not actually generating an error message
warn_unused_ignores = true
# returning a value with type Any from a function declared with a non-Any return type
warn_return_any = true
# code determined to be unreachable or redundant after performing type analysis
warn_unreachable = true
